import React, { useState, useRef, useCallback } from 'react';
import { generateReactHelpers, useDropzone } from "@uploadthing/react";
import { generateClientDropzoneAccept } from "uploadthing/client";

import { UploadThingError } from "uploadthing/server";
import { ourFileRouter } from '@/app/api/uploadthing/core';

import { TbCapture } from "react-icons/tb";
import { FaCamera } from "react-icons/fa";
import { GoFileMedia } from "react-icons/go";

interface BoutonCameraProps {
  setImage: (url: string) => void; 
}


export type OurFileRouter = typeof ourFileRouter;

export const { useUploadThing, uploadFiles } =
  generateReactHelpers<OurFileRouter>();

const BoutonCamera: React.FC<BoutonCameraProps> = ({ setImage }) => {
  const [isCameraOpen, setIsCameraOpen] = useState(false);
  const [isFrontCamera, setIsFrontCamera] = useState(true);
  
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [files, setFiles] = useState<File[]>([]);
  
  const { permittedFileInfo, startUpload } = useUploadThing(
    "imageUploader", // Utilisez votre endpoint personnalisé ici
    {
      onClientUploadComplete: (res) => {
        console.log("Upload completed:", res);
        setImage(res[0].url); // Mettez à jour l'image avec l'URL du fichier uploadé
      },
      onUploadError: (error) => {
        console.error("Error occurred while uploading:", error);
      },
      onUploadBegin: () => {
        console.log("Upload has begun");
      }
    }
  );

  const fileTypes = permittedFileInfo?.config ? Object.keys(permittedFileInfo?.config) : [];

  const onDrop = useCallback((acceptedFiles: File[]) => {
    setFiles(acceptedFiles);
  }, []);

  const { getRootProps, getInputProps } = useDropzone({
    onDrop,
    accept: fileTypes ? generateClientDropzoneAccept(fileTypes) : undefined,
  });

  const openCamera = () => {
    setIsCameraOpen(true);
    navigator.mediaDevices.getUserMedia({ video: true })
      .then((stream) => {
        if (videoRef.current) {
          videoRef.current.srcObject = stream;
          videoRef.current.play();
        }
      })
      .catch((err) => {
        console.error("Error accessing the camera: ", err);
      });
  };



  const captureImage = async () => {
    if (canvasRef.current && videoRef.current) {
      const canvas = canvasRef.current;
      const video = videoRef.current;
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext('2d')?.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);
      const blob = await new Promise<Blob | null>((resolve) => canvas.toBlob((b) => resolve(b)));
      
      if (blob) {
        const file = new File([blob], 'captured-image.png', { type: 'image/png' });
        // Commencer l'upload avec useUploadThing
        startUpload([file]);
  
        // Mettre à jour l'image avec l'URL du fichier téléchargé
        setImage(URL.createObjectURL(blob));
      }
    }
  };
  

  return (
    <div>
      <button onClick={openCamera}> camera <FaCamera /> </button>
      {isCameraOpen && (
        <div>
          <video ref={videoRef} style={{ display: isCameraOpen ? 'block' : 'none' }}></video>
          <canvas ref={canvasRef} style={{ display: 'none' }}></canvas>
          <button onClick={captureImage}> <TbCapture/> take shot </button>
        </div>
      )}
      <div {...getRootProps()}>
        <input {...getInputProps()} />
        <div>
          {files.length > 0 && (
            <button onClick={() => startUpload(files)}>
              Upload {files.length} files
            </button>
          )}
        </div>
        Drop files here!
        <GoFileMedia />
      </div>
    </div>
  );
};

export default BoutonCamera;